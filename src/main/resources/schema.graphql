scalar JSON
scalar Long

### Top-level Entities ###

type Pipeline @key(fields: "id") {
    id: ID!
    nodes: [Node]
    queues: [Queue]
    messages: [Message]
    logs: [GraphLog]
}

type Node @key(fields: "id") {
    id: ID!
    config: JSON
    enabled: Boolean # is the node "turned on"
    capacity: Int # maximum runs allowed in running queue
    workflow: Workflow  # TODO: This type should go in lib
    pipeline: Pipeline
    queues: [Queue]
    messages: [Message]
    logs: [GraphLog]
}

### QUEUE Types ###

type Queue @key(fields: "id") {
    id: ID!
    exchange: String
    queue: String
    pipeline: Pipeline
    node: Node
    messages: [Message]
    logs: [GraphLog]
}

### Message Types ###

interface Message {
    id: ID!
    pipeline: Pipeline
    node: Node
    queue: Queue
    logs: [GraphLog]
}

type GraphEvent implements Message @key(fields: "id") {
    id: ID!
    pipeline: Pipeline
    node: Node
    queue: Queue
    logs: [GraphLog]
    analysisId: ID
    analysisState: String
    analysisType: String
    studyId: String
    experimentalStrategy: String
    donorIds: [String]
    files: [AnalysisFile]
    analysis: Analysis  # TODO: This type should go in lib
}

type AnalysisFile {
    dataType: String
}

type GraphRun implements Message @key(fields: "id") {
    id: ID!
    pipeline: Pipeline
    node: Node
    queue: Queue
    logs: [GraphLog]
    runId: ID
    run: Run  # TODO: This type should go in lib
}

## Log types
type GraphLog @key(fields: "id") {
    id: ID!
    graphMessageId: ID
    log: String
    queue: Queue
    node: Node
    pipeline: Pipeline
    timestamp: Long
}

### Aggregations ###

type PipelineAggs {
    pipeline: Pipeline
    numNodes: Int
    queuedCount: Int
    runningCount: Int
    completeCount: Int
}

type NodeAggs {
    node: Node
    queuedCount: Int
    runningCount: Int
    completeCount: Int
}

# Stubbed external type (will come from Workflow Registry)
type Workflow @key(fields: "id") @extends {
    id: ID! @external
    repo: String
    schema: String
    running: [Run] # runs that are in the running queue(s) owned by this Pipeline/Node
}

# Stubbed external type (from Workflow Search)
type Run @key(fields: "runId") @extends {
    runId: ID! @external
    pipeline: Pipeline @requires(fields: "workflow")
    node: Node @requires(fields: "workflow")
}

# Stubbed external type (from Song Search)
type Analysis @key(fields: "analysisId") @extends {
    analysisId: ID! @external
    pipeline: Pipeline
    node: Node
}

# temp filter that does nothing currently
input StubFilter {
    id: ID
}

enum GraphLogFilter {
    graphMessageId,
    queue,
    node,
    pipeline,
    timestamp
}

# Paging and Sort
input Page {
    size: Int!
    from: Int!
}

enum SortOrder {
    asc,
    desc
}

input GraphLogSort {
    fieldName: GraphLogSortField!
    order: SortOrder!
}

enum GraphLogSortField {
    graphMessageId,
    queue,
    node,
    pipeline,
    timestamp
}

#  Search Results
type SearchResultInfo {
    contentCount: String!
    hasNextFrom: String!
    totalHits: String!
}

type GraphLogsResult {
    content: [GraphLog!]
    info: SearchResultInfo!
}

type AggregationResult {
    totalHits: String!
}

# TBD if we want all these queries and what filters they would provide
extend type Query {
    #    pipelines(filter: StubFilter, page: Page): [Pipeline]
    #    nodes(filter: StubFilter, page: Page): [Node]
    #    queues(filter: StubFilter, page: Page): [Queue]
    #    messages(filter: StubFilter, page: Page): [Message]
    logs(filter: GraphLogFilter, page: Page, sorts: [GraphLogSort!]): GraphLogsResult!
    logAggs(filter: GraphLogFilter): AggregationResult!
    #    pipelineAggs: PipelineAggs
    #    nodeAggs: NodeAggs
}